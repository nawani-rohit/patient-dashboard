{"ast":null,"code":"// src/api/patientApi.js\n\nexport async function fetchAllPatients() {\n  // Read from environment variables\n  const username = process.env.REACT_APP_API_USERNAME;\n  const password = process.env.REACT_APP_API_PASSWORD;\n  const endpoint = process.env.REACT_APP_API_ENDPOINT;\n  if (!username || !password || !endpoint) {\n    throw new Error('Missing API credentials or endpoint in environment variables.');\n  }\n\n  // Dynamically encode credentials at runtime\n  const encodedCredentials = btoa(`${username}:${password}`);\n  const response = await fetch(endpoint, {\n    method: 'GET',\n    headers: {\n      Authorization: `Basic ${encodedCredentials}`\n    }\n  });\n  if (!response.ok) {\n    throw new Error(`API request failed with status ${response.status}`);\n  }\n  return await response.json();\n}\n\n// Function to fetch Jessica Taylor's data specifically\nexport async function fetchJessicaTaylorData() {\n  try {\n    const allPatients = await fetchAllPatients();\n    const jessicaData = allPatients.find(patient => patient.name === 'Brandon Mitchell');\n    if (!jessicaData) {\n      throw new Error(\"Jessica Taylor's data not found in the API response\");\n    }\n    return jessicaData;\n  } catch (error) {\n    console.error('Error fetching Jessica Taylor data:', error);\n    throw error;\n  }\n}","map":{"version":3,"names":["fetchAllPatients","username","process","env","REACT_APP_API_USERNAME","password","REACT_APP_API_PASSWORD","endpoint","REACT_APP_API_ENDPOINT","Error","encodedCredentials","btoa","response","fetch","method","headers","Authorization","ok","status","json","fetchJessicaTaylorData","allPatients","jessicaData","find","patient","name","error","console"],"sources":["/Users/rohitnawani/Desktop/PatientDashboardProject/my-patient-dashboard/src/api/patientApi.js"],"sourcesContent":["// src/api/patientApi.js\n\nexport async function fetchAllPatients() {\n  // Read from environment variables\n  const username = process.env.REACT_APP_API_USERNAME;\n  const password = process.env.REACT_APP_API_PASSWORD;\n  const endpoint = process.env.REACT_APP_API_ENDPOINT;\n\n  if (!username || !password || !endpoint) {\n    throw new Error('Missing API credentials or endpoint in environment variables.');\n  }\n\n  // Dynamically encode credentials at runtime\n  const encodedCredentials = btoa(`${username}:${password}`);\n\n  const response = await fetch(endpoint, {\n    method: 'GET',\n    headers: {\n      Authorization: `Basic ${encodedCredentials}`\n    }\n  });\n\n  if (!response.ok) {\n    throw new Error(`API request failed with status ${response.status}`);\n  }\n\n  return await response.json();\n}\n\n// Function to fetch Jessica Taylor's data specifically\nexport async function fetchJessicaTaylorData() {\n  try {\n    const allPatients = await fetchAllPatients();\n    const jessicaData = allPatients.find(patient => patient.name === 'Brandon Mitchell');\n    \n    if (!jessicaData) {\n      throw new Error(\"Jessica Taylor's data not found in the API response\");\n    }\n    \n    return jessicaData;\n  } catch (error) {\n    console.error('Error fetching Jessica Taylor data:', error);\n    throw error;\n  }\n}"],"mappings":"AAAA;;AAEA,OAAO,eAAeA,gBAAgBA,CAAA,EAAG;EACvC;EACA,MAAMC,QAAQ,GAAGC,OAAO,CAACC,GAAG,CAACC,sBAAsB;EACnD,MAAMC,QAAQ,GAAGH,OAAO,CAACC,GAAG,CAACG,sBAAsB;EACnD,MAAMC,QAAQ,GAAGL,OAAO,CAACC,GAAG,CAACK,sBAAsB;EAEnD,IAAI,CAACP,QAAQ,IAAI,CAACI,QAAQ,IAAI,CAACE,QAAQ,EAAE;IACvC,MAAM,IAAIE,KAAK,CAAC,+DAA+D,CAAC;EAClF;;EAEA;EACA,MAAMC,kBAAkB,GAAGC,IAAI,CAAC,GAAGV,QAAQ,IAAII,QAAQ,EAAE,CAAC;EAE1D,MAAMO,QAAQ,GAAG,MAAMC,KAAK,CAACN,QAAQ,EAAE;IACrCO,MAAM,EAAE,KAAK;IACbC,OAAO,EAAE;MACPC,aAAa,EAAE,SAASN,kBAAkB;IAC5C;EACF,CAAC,CAAC;EAEF,IAAI,CAACE,QAAQ,CAACK,EAAE,EAAE;IAChB,MAAM,IAAIR,KAAK,CAAC,kCAAkCG,QAAQ,CAACM,MAAM,EAAE,CAAC;EACtE;EAEA,OAAO,MAAMN,QAAQ,CAACO,IAAI,CAAC,CAAC;AAC9B;;AAEA;AACA,OAAO,eAAeC,sBAAsBA,CAAA,EAAG;EAC7C,IAAI;IACF,MAAMC,WAAW,GAAG,MAAMrB,gBAAgB,CAAC,CAAC;IAC5C,MAAMsB,WAAW,GAAGD,WAAW,CAACE,IAAI,CAACC,OAAO,IAAIA,OAAO,CAACC,IAAI,KAAK,kBAAkB,CAAC;IAEpF,IAAI,CAACH,WAAW,EAAE;MAChB,MAAM,IAAIb,KAAK,CAAC,qDAAqD,CAAC;IACxE;IAEA,OAAOa,WAAW;EACpB,CAAC,CAAC,OAAOI,KAAK,EAAE;IACdC,OAAO,CAACD,KAAK,CAAC,qCAAqC,EAAEA,KAAK,CAAC;IAC3D,MAAMA,KAAK;EACb;AACF","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}